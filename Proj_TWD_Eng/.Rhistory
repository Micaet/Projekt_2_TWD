labs(x = "Rok budowy",
y = "Cena [tys] (log)",
title = "Ceny nieruchomości w poszczególnych latach",
color = "Typ ceny") +
theme(plot.title = element_text(size = 15, face = "bold", hjust = 0.47))
# Tu umieść kod do wygenerowania odpowiedzi do zadania.
tmp <- df %>% group_by(yr_built) %>%
summarize(min_price = min(price),
max_price = max(price),
mean_price = mean(price))
ggplot(tmp, aes(x = yr_built)) +
geom_line(aes(y = min_price/1000, color = "Min Cena"),size=1) +
geom_line(aes(y = max_price/1000, color = "Max Cena"),size=1) +
geom_line(aes(y = mean_price/1000, color = "Średnia Cena"),size=1) +
geom_point( aes(y = min_price/1000,color = "Min Cena"), , size = 1) +
geom_point( aes(y = max_price/1000, color = "Max Cena"), size = 1) +
geom_point( aes(y = mean_price/1000, color = "Średnia Cena"), size = 1)+
scale_y_log10() +
scale_color_manual(values = c("Max Cena" = "red",
"Średnia Cena" = "#121619",
"Min Cena" = "blue"),
breaks = c("Max Cena", "Średnia Cena", "Min Cena")) +
labs(x = "Rok budowy",
y = "Cena [tys] (log)",
title = "Ceny nieruchomości w poszczególnych latach",
color = "Typ ceny") +
theme(plot.title = element_text(size = 15, face = "bold", hjust = 0.47))
# Tu umieść kod do wygenerowania odpowiedzi do zadania.
tmp <- df %>% group_by(yr_built) %>%
summarize(min_price = min(price),
max_price = max(price),
mean_price = mean(price))
ggplot(tmp, aes(x = yr_built)) +
geom_line(aes(y = min_price/1000, color = "Min Cena"),size=1) +
geom_line(aes(y = max_price/1000, color = "Max Cena"),size=1) +
geom_line(aes(y = mean_price/1000, color = "Średnia Cena"),size=1) +
geom_point( aes(y = min_price/1000,color = "Min Cena"), , size =2) +
geom_point( aes(y = max_price/1000, color = "Max Cena"), size = 2) +
geom_point( aes(y = mean_price/1000, color = "Średnia Cena"), size = 2)+
scale_y_log10() +
scale_color_manual(values = c("Max Cena" = "red",
"Średnia Cena" = "#121619",
"Min Cena" = "blue"),
breaks = c("Max Cena", "Średnia Cena", "Min Cena")) +
labs(x = "Rok budowy",
y = "Cena [tys] (log)",
title = "Ceny nieruchomości w poszczególnych latach",
color = "Typ ceny") +
theme(plot.title = element_text(size = 15, face = "bold", hjust = 0.47))
# Tu umieść kod do wygenerowania odpowiedzi do zadania.
tmp <- df %>% group_by(yr_built) %>%
summarize(min_price = min(price),
max_price = max(price),
mean_price = mean(price))
ggplot(tmp, aes(x = yr_built)) +
geom_line(aes(y = min_price/1000, color = "Min Cena"),size=1) +
geom_line(aes(y = max_price/1000, color = "Max Cena"),size=1) +
geom_line(aes(y = mean_price/1000, color = "Średnia Cena"),size=1) +
geom_point( aes(y = min_price/1000,color = "Min Cena"), , size =1.5) +
geom_point( aes(y = max_price/1000, color = "Max Cena"), size = 1.5) +
geom_point( aes(y = mean_price/1000, color = "Średnia Cena"), size = 1.5)+
scale_y_log10() +
scale_color_manual(values = c("Max Cena" = "red",
"Średnia Cena" = "#121619",
"Min Cena" = "blue"),
breaks = c("Max Cena", "Średnia Cena", "Min Cena")) +
labs(x = "Rok budowy",
y = "Cena [tys] (log)",
title = "Ceny nieruchomości w poszczególnych latach",
color = "Typ ceny") +
theme(plot.title = element_text(size = 15, face = "bold", hjust = 0.47))
x1<-read.csv("Accidental_Drug_Related_Deaths_2012-2023.csv")
x1<-read.csv("Accidental_Drug_Related_Deaths_2012-2023.csv")
x2<-read.csv("Drug_overdose_death_rates__by_drug_type__sex__age__race__and_Hispanic_origin__United_States.csv")
x2<-read.csv("Drug_overdose_death_rates__by_drug_type__sex__age__race__and_Hispanic_origin__United_States.csv")
x3<-read.csv("Monthly_Counts_of_Deaths_by_Select_Causes__2014-2019.csv")
x1<-read.csv("Accidental_Drug_Related_Deaths_2012-2023.csv")
x2<-read.csv("Drug_overdose_death_rates__by_drug_type__sex__age__race__and_Hispanic_origin__United_States.csv")
x3<-read.csv("Monthly_Counts_of_Deaths_by_Select_Causes__2014-2019.csv")
x4<-read.csv("Monthly_Provisional_Counts_of_Deaths_by_Select_Causes__2020-2023.csv")
x4<-read.csv("Monthly_Provisional_Counts_of_Deaths_by_Select_Causes__2020-2023.csv")
x5<-read.csv("NCHS_-_Drug_Poisoning_Mortality_by_County__United_States.csv")
```{r}
x1
x1
```{r}
x2
x2
```{r}
x3
x4
x5
x2<-read.csv("Drug_overdose_death_rates__by_drug_type__sex__age__race__and_Hispanic_origin__United_States.csv")
x6 <- read.csv("per-capita-economic-cost-of-opioid-use-disorder-and-fatal-overdose-by-state-2017")
x2<-read.csv("Drug_overdose_death_rates__by_drug_type__sex__age__race__and_Hispanic_origin__United_States.csv")
x3<-read.csv("Monthly_Counts_of_Deaths_by_Select_Causes__2014-2019.csv")
x4<-read.csv("Monthly_Provisional_Counts_of_Deaths_by_Select_Causes__2020-2023.csv")
x5<-read.csv("NCHS_-_Drug_Poisoning_Mortality_by_County__United_States.csv")
x5<-read.csv("NCHS_-_Drug_Poisoning_Mortality_by_County__United_States.csv")
x6 <-read.csv("per-capita-economic-cost-of-opioid-use-disorder-and-fatal-overdose-by-state-2017")
source("C:/Users/micae/Desktop/Studia/TWD/HW3/SyrkiewiczMichal/hw3_kod.R", echo=TRUE)
df_long <- df %>%
pivot_longer(
cols = -Country,
names_to = "Category",
values_to = "Value"
)
# Define category order and max value
category_order <- c(
"Social compensation payments to citizens",
"Supporting renewable energies",
"Supporting climate research and technologies",
"Supporting sustainable mobility",
"Financing climate protection projects",
"None of these",
"Don't know"
)
max_v = max(df_long$Value)
df_long$Category <- factor(df_long$Category, levels = category_order)
# Create Country_Group to add space between groups
df_long <- df_long %>%
mutate(
Country_Group = ifelse(Country == "Total", "Total", "Countries")
)
# Plot with position_dodge2 and additional space
df_long %>%
filter(Country != "Total") %>%
ggplot(aes(x = interaction(Country_Group, Country), y = Value, fill = Category)) +
geom_col(position = position_dodge2(preserve = "single", padding = 0.5)) + # Adjust padding for wider space
scale_fill_brewer(palette = "Set2") +
labs(
y = "Percentage of people suggesting",
x = "",
title = "Which of these following actions should the revenues from the CO2 emission tax be allocated to?"
) +
theme_bw() +
theme(
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_y_continuous(expand = c(0, 0), limits = c(0, max_v * 1.05)) +
scale_x_discrete(labels = unique(df_long$Country)) # Customize spacing further
source("C:/Users/micae/Desktop/Studia/TWD/HW3/SyrkiewiczMichal/hw3_kod.R", echo=TRUE)
library(leaflet)
library(sf)
library(dplyr)
library(leaflet)
library(sf)
library(dplyr)
dane <- data.frame(
Wojewodztwo <- c(
"Łódzkie", "Świętokrzyskie", "Wielkopolskie", "Kujawsko-Pomorskie", "Małopolskie",
"Dolnośląskie", "Lubelskie", "Lubuskie", "Mazowieckie", "Opolskie",
"Podlaskie", "Pomorskie", "Śląskie", "Podkarpackie", "Warmińsko-Mazurskie",
"Zachodniopomorskie"
),
Wychowankowie_2016 = c(1560, 740, 1441, 1701, 1645, 3120, 1402, 678, 2675, 695, 581, 1415, 3542, 966, 1350,1403),
Wychowankowie_2023 = c(1689, 760, 1208, 1811, 1673, 3050, 1297, 664, 2531, 539, 597, 1501, 3131, 819, 1182, 1205)
)
dane <- dane %>%
mutate(
Roznica = Wychowankowie_2023 - Wychowankowie_2016,
Procent_Roznicy = (Roznica / Wychowankowie_2016) * 100,
Wojewodztwo = Wojewodztwo....c..Łódzkie....Świętokrzyskie....Wielkopolskie...
) %>% select(c(6,2,3,4,5))
granice <- st_read("https://raw.githubusercontent.com/andilabs/polska-wojewodztwa-geojson/refs/heads/master/polska-wojewodztwa.geojson")
granice$name <- dane$Wojewodztwo
colnames(granice)[12] <-"Wojewodztwo"
granice_dane <- granice %>%
left_join(dane, by = "Wojewodztwo")
granice_dane$labels <- sprintf(
"<strong>%s</strong><br/>
Wychowankowie w 2023: <strong>%s</strong><br/>
Wychowankowie w 2016: <strong>%s</strong><br/>
Różnica: <strong>%s</strong> osób (<i>%s%%</i>)",
granice_dane$Wojewodztwo,
format(granice_dane$Wychowankowie_2023, big.mark = " ", scientific = FALSE),
format(granice_dane$Wychowankowie_2016, big.mark = " ", scientific = FALSE),
format(granice_dane$Roznica, big.mark = " ", scientific = FALSE),
format(granice_dane$Procent_Roznicy, digits = 2)
)
granice_dane$labels <- lapply(granice_dane$labels, htmltools::HTML)
pal <- colorNumeric(
palette = c("darkgreen", "white", "darkred"),
domain = c(-23, 23)
)
p <- leaflet(granice_dane) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(Procent_Roznicy),
weight = 1,
color = "black",
fillOpacity = 0.7,
label = ~labels,
labelOptions = labelOptions(
style = list("color" = "black"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend(
pal = pal,
values = ~Procent_Roznicy,
title = "Różnica w %",
position = "bottomright"
)
p
library(gue)
library(glue)
library(leaflet)
library(sf)
library(dplyr)
library(glue)
granice_dane$labels <- glue(
"<strong>{granice_dane$Wojewodztwo}</strong><br/>
Wychowankowie w 2023: <strong>{format(granice_dane$Wychowankowie_2023, big.mark = ' ', scientific = FALSE)}</strong><br/>
Wychowankowie w 2016: <strong>{format(granice_dane$Wychowankowie_2016, big.mark = ' ', scientific = FALSE)}</strong><br/>
Różnica: <strong>{format(granice_dane$Roznica, big.mark = ' ', scientific = FALSE)}</strong> osób (<i>{format(granice_dane$Procent_Roznicy, digits = 2)}%</i>)"
)
granice$name <- dane$Wojewodztwo
colnames(granice)[12] <-"Wojewodztwo"
granice_dane <- granice %>%
left_join(dane, by = "Wojewodztwo")
granice_dane$labels <- sprintf(
"<strong>%s</strong><br/>
Wychowankowie w 2023: <strong>%s</strong><br/>
Wychowankowie w 2016: <strong>%s</strong><br/>
Różnica: <strong>%s</strong> osób (<i>%s%%</i>)",
granice_dane$Wojewodztwo,
format(granice_dane$Wychowankowie_2023, big.mark = " ", scientific = FALSE),
format(granice_dane$Wychowankowie_2016, big.mark = " ", scientific = FALSE),
format(granice_dane$Roznica, big.mark = " ", scientific = FALSE),
format(granice_dane$Procent_Roznicy, digits = 2)
)
granice_dane$labels <- glue(
"<strong>{granice_dane$Wojewodztwo}</strong><br/>
Wychowankowie w 2023: <strong>{format(granice_dane$Wychowankowie_2023, big.mark = ' ', scientific = FALSE)}</strong><br/>
Wychowankowie w 2016: <strong>{format(granice_dane$Wychowankowie_2016, big.mark = ' ', scientific = FALSE)}</strong><br/>
Różnica: <strong>{format(granice_dane$Roznica, big.mark = ' ', scientific = FALSE)}</strong> osób (<i>{format(granice_dane$Procent_Roznicy, digits = 2)}%</i>)"
)
granice_dane$labels <- lapply(granice_dane$labels, htmltools::HTML)
pal <- colorNumeric(
palette = c("darkgreen", "white", "darkred"),
domain = c(-23, 23)
)
p <- leaflet(granice_dane) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(Procent_Roznicy),
weight = 1,
color = "black",
fillOpacity = 0.7,
label = ~labels,
labelOptions = labelOptions(
style = list("color" = "black"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend(
pal = pal,
values = ~Procent_Roznicy,
title = "Różnica w %",
position = "bottomright"
)
p
library(shiny); runApp('D:/programy_studia/TWD/Projekt 2/Ryszard/Dashboard.R')
install.packages("ggplotly")
library(ggplotly)
library(plotly)
install.packages("plotly")
library(plotly)
runApp('D:/programy_studia/TWD/Projekt 2/Ryszard/Dashboard.R')
library(shiny); source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
builtin_themes()
bootswatch_themes()
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
auta2012
str(auta2012)
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
source('D:/programy_studia/TWD/lab10.R')
# Wyświetlenie wykresu
print(p)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
# Wczytanie wymaganej biblioteki
library(ggplot2)
# Generowanie zbioru danych dla choinki
set.seed(42)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
View(p)
View(star)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
source("C:/Users/micae/Desktop/Studia/TWD/HW5/[HW5]Michal_Syrkiewicz.R", echo=TRUE)
shiny::runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
shiny::runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
shiny::runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
shiny::runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
shiny::runApp('D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng')
getwd
getwd()
setwd("D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng")
plot <- data %>% plot_ly(
x = ~x,
y = ~y,
type = "scatter",
mode = "markers",
color = ~type,
size = 3,
height = 416,
width = 500
) %>% layout(
images = list(
source = base64enc::dataURI(file = "./www/map11.png"),
x = 0,
y = 0,
sizex = 1,
sizey = 1,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom",
layer = "below"
),
paper_bgcolor = 'rgba(0,0,0,0)',
plot_bgcolor = 'rgba(0,0,0,0)',
xaxis = list(
title = '',
showgrid = FALSE,
showticklabels = FALSE,
range(0, 14000),
tickfont = list(color = 'rgba(0,0,0,0)'),
linecolor = 'rgba(0,0,0,0)'
),
yaxis = list(
title = '',
showgrid = FALSE,
showticklabels = FALSE,
range(0, 14000),
tickfont = list(color = 'rgba(0,0,0,0)'),
linecolor = 'rgba(0,0,0,0)'
),
legend = list(
font = list(
color ="#c8aa6e"
)
)
) %>%
config(displayModeBar = FALSE)
data <- read.csv("Bottom_matches.csv")
View(data)
data <- read.csv("Bottom_matches.csv")
source("D:/programy_studia/TWD/Projekt 2/Projekt_2_TWD/Proj_TWD_Eng/xddd.R", echo=TRUE)
disp(plot)
plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
